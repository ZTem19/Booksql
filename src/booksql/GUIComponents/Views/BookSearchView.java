package booksql.GUIComponents.Views;


import booksql.BookDAO;
import booksql.DataModels.FullBook;
import booksql.DatabaseAccess;
import booksql.forms.BookAdd;
import booksql.forms.BookEdit;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

public class BookSearchView extends javax.swing.JPanel{
    /**
     * Creates new form BookDisplay
     */
    public BookSearchView() {
        initComponents();
        tableModel = new DefaultTableModel() 
        {
            @Override
            public boolean isCellEditable(int row, int column) 
            {
                // Get column name by index and allow only "Edit" and "Delete" to be editable
                String columnName = getColumnName(column);
                return columnName.equals("Edit") || columnName.equals("Delete");
            }
        };
        
        tableModel.setColumnIdentifiers
        (new String[] {"ID", "Title", "Authors", "Genre", "Description", 
            "Total Copies", "Available Copies", "Copies Checked Out", "Publisher Name", "Date Published", "Edit", "Delete"});
        //bookTable = new javax.swing.JTable();
        bookTable.setModel(tableModel);
        bookTable.getColumn("Edit").setCellRenderer(new EditButtonRenderer());
        bookTable.getColumn("Edit").setCellEditor(new EditButtonEditor(new JCheckBox()));
        bookTable.getColumn("Delete").setCellRenderer(new DeleteButtonRenderer());
        bookTable.getColumn("Delete").setCellEditor(new DeleteButtonEditor(new JCheckBox()));
        
        TableColumnModel columnModel = bookTable.getColumnModel();

        // Set custom widths for each column by index
        columnModel.getColumn(0).setPreferredWidth(60);   
        columnModel.getColumn(1).setPreferredWidth(200);
        columnModel.getColumn(2).setPreferredWidth(200);  
        columnModel.getColumn(3).setPreferredWidth(100);  
        columnModel.getColumn(4).setPreferredWidth(300);  
        columnModel.getColumn(5).setPreferredWidth(100);  
        columnModel.getColumn(6).setPreferredWidth(100);  
        columnModel.getColumn(7).setPreferredWidth(100);
        columnModel.getColumn(8).setPreferredWidth(75); 
        columnModel.getColumn(9).setPreferredWidth(75);   
        columnModel.getColumn(10).setPreferredWidth(75);   
        
        loadBooks();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        titleSearchText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        AuthorSearchText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        publisherSearchText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        genreSearchText = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();

        jLabel3.setText("jLabel2");

        jTextField2.setText("jTextField1");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        bookTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(bookTable);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Books");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        addButton.setText("Add Book");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Filter By:");

        jLabel2.setText("Title:");

        jLabel4.setText("Author Name:");

        jLabel5.setText("Publisher Name:");

        publisherSearchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publisherSearchTextActionPerformed(evt);
            }
        });

        jLabel6.setText("Genre:");

        searchBtn.setText("Search with Filters");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(titleSearchText)
                            .addComponent(publisherSearchText, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AuthorSearchText)
                            .addComponent(genreSearchText, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(titleSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(AuthorSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(publisherSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(genreSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
    }// </editor-fold>                        

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        BookAdd dialog = new BookAdd( (JFrame) SwingUtilities.getWindowAncestor(addButton), true);
        dialog.setVisible(true);
        loadBooks();
    }                                         

    private void publisherSearchTextActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }                                                   

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        titleFilter = titleSearchText.getText();
        genreFilter = genreSearchText.getText();
        authorFilter = AuthorSearchText.getText();
        publisherFilter = publisherSearchText.getText();
        loadBooksWithFilters();
    }                                         

    public void loadBooks()
    {
        try {
            // Get all books using BookDAO
            BookDAO bookDAO = DatabaseAccess.getBookDAO();
            ArrayList<FullBook> books = bookDAO.getAllFullBooks();

            // Clear previous data in the table
            tableModel.setRowCount(0);

            // Add rows to the table for each book
            for (FullBook b : books) {
                tableModel.addRow(new Object[]{
                    b.getBookId(),
                    b.getTitle(),
                    b.getAuthors(),
                    b.getGenre(),
                    b.getDescription(),
                    b.getNumTotal(),
                    b.getNumAvailable(),
                    b.getNumCheckedOut(),
                    b.getPublisherName(),
                    b.getDatePublished(),
                });
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading books: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void loadBooksWithFilters()
    {
        try {
            // Get all books using BookDAO
            BookDAO bookDAO = DatabaseAccess.getBookDAO();
            ArrayList<FullBook> books = bookDAO.getAllFullBooksWithFilters
                (titleFilter, genreFilter, authorFilter, publisherFilter);

            // Clear previous data in the table
            tableModel.setRowCount(0);

            // Add rows to the table for each book
            for (FullBook b : books) {
                tableModel.addRow(new Object[]{
                    b.getBookId(),
                    b.getTitle(),
                    b.getAuthors(),
                    b.getGenre(),
                    b.getDescription(),
                    b.getNumTotal(),
                    b.getNumAvailable(),
                    b.getNumCheckedOut(),
                    b.getPublisherName(),
                    b.getDatePublished(),
                });
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading books: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Variables I declared manually
    private DefaultTableModel tableModel;
    private String titleFilter;
    private String authorFilter;
    private String genreFilter;
    private String publisherFilter;

    // Variables declaration - do not modify                     
    private javax.swing.JTextField AuthorSearchText;
    private javax.swing.JButton addButton;
    private javax.swing.JTable bookTable;
    private javax.swing.JTextField genreSearchText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField publisherSearchText;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField titleSearchText;
    // End of variables declaration                   

    class EditButtonRenderer extends JButton implements TableCellRenderer {
        public EditButtonRenderer() {
            setOpaque(true);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
            setText((value == null) ? "Edit" : value.toString());
            return this;
        }
    }

    class EditButtonEditor extends DefaultCellEditor {
        private JButton button;
        private String label;
        private boolean clicked;
        private int selectedRow;

        public EditButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton();
            button.setOpaque(true);

            button.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    fireEditingStopped();
                }
            });
        }

        public Component getTableCellEditorComponent(JTable table, Object value,
        boolean isSelected, int row, int column) {
            label = (value == null) ? "Edit" : value.toString();
            button.setText(label);
            clicked = true;
            selectedRow = row;
            return button;
        }

        public Object getCellEditorValue() {
            if (clicked) {
                // All code which is called when button is clicked
                int bookId = (int) bookTable.getValueAt(selectedRow, 0);
                
                // Trigger edit form
                BookEdit dialog = new BookEdit(
                    (JFrame) SwingUtilities.getWindowAncestor(button),
                    true,                                               
                    bookId
                );
                dialog.setVisible(true);
                loadBooks();
            }
            clicked = false;
            return label;
        }

        public boolean stopCellEditing() {
            clicked = false;
            return super.stopCellEditing();
        }

        protected void fireEditingStopped() {
            try
            {
               super.fireEditingStopped();
            }
            catch (Exception e)
            {
            }
        }
    }

    class DeleteButtonRenderer extends JButton implements TableCellRenderer 
    {
        public DeleteButtonRenderer() {
            setOpaque(true);
            setForeground(Color.WHITE);
            setBackground(Color.RED);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            setText("Delete");
            return this;
        }
        
        
    }

    class DeleteButtonEditor extends DefaultCellEditor 
    {
        private JButton button;
        private boolean clicked;
        private int selectedRow;

        public DeleteButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton("Delete");
            button.setOpaque(true);
            button.setForeground(Color.WHITE);
            button.setBackground(Color.RED);

            button.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    fireEditingStopped(); // Stops editing
                }
            });
        }

        public Component getTableCellEditorComponent(JTable table, Object value,
        boolean isSelected, int row, int column) {
            clicked = true;
            selectedRow = row;
            return button;
        }

        public Object getCellEditorValue() {
            if (clicked) {
                // All code which is called when button is clicked
                int bookId = (int) bookTable.getValueAt(selectedRow, 0);
                int response = JOptionPane.showConfirmDialog(button,
                    "Are you sure you want to delete book ID " + bookId + "?",
                    "Confirm Delete", JOptionPane.YES_NO_OPTION);

                if (response == JOptionPane.YES_OPTION) {
                    try {
                        BookDAO bookDAO = DatabaseAccess.getBookDAO();
                        bookDAO.deleteBook(bookId);
                        JOptionPane.showMessageDialog(button, "Book deleted.");
                        loadBooks();
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(button, "Error deleting book: " + e.getMessage());
                        e.printStackTrace();
                    }
                }
                
                selectedRow = 0;
            }
            clicked = false;
            return "Delete";
        }

        public boolean stopCellEditing() {
            clicked = false;
            return super.stopCellEditing();
        }

        protected void fireEditingStopped() {
            try
            {
                super.fireEditingStopped();
            }
            catch (Exception e)
            {
            }
        }
    }
}