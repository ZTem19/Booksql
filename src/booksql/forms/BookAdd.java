/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package booksql.forms;

import booksql.BookDAO;
import booksql.PublisherDAO;
import booksql.AuthorDAO;
import booksql.DataModels.Book;
import booksql.DataModels.Publisher;
import booksql.DataModels.Author;
import booksql.DatabaseAccess;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author evans
 */
public class BookAdd extends javax.swing.JDialog {

    /**
     * Creates new form BookEdit
     */
    public BookAdd(JFrame Parent, boolean modal) {
        super(Parent, modal);
        setLocationRelativeTo(Parent);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        initComponents();
               
        
        publisherComboBox.removeAllItems();
        addExistingAuthorCombobox.removeAllItems();
        try
        {
            PublisherDAO publisherDAO = DatabaseAccess.getPublisherDAO();
            ArrayList<Publisher> publishers = publisherDAO.getAllPublishersOrderById();
            for (Publisher publisher : publishers)
            {
                publisherComboBox.addItem(publisher.getPublisherId() + ": " + publisher.getName());
            }
            AuthorDAO authorDAO = DatabaseAccess.getAuthorDAO();
            ArrayList<Author> authors = authorDAO.getAllAuthorsOrderById();
            for (Author author : authors)
            {
                addExistingAuthorCombobox.addItem(author.getAuthorId() + ": " + 
                        author.getFirstName() + " " + author.getLastName());
            }
        }
        catch (SQLException e) 
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading publishers: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        authorTableModel = new DefaultTableModel() 
        {
            @Override
            public boolean isCellEditable(int row, int column) 
            {
                String columnName = getColumnName(column);
                return columnName.equals("Delete");
            }
        };
        authorTableModel.setColumnIdentifiers
        (new String[] {"First Name", "Last Name", "Birth Date", "Delete"});
        author_table.setModel(authorTableModel);
        author_table.getColumn("Delete").setCellRenderer(new BookAdd.DeleteButtonRenderer());
        author_table.getColumn("Delete").setCellEditor(new BookAdd.DeleteButtonEditor(new JCheckBox()));
        
        authors = new ArrayList();
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        numTotalText1 = new javax.swing.JTextField();
        addAuthorLable1 = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        titleText = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        numTotalLabel = new javax.swing.JLabel();
        genreLabel = new javax.swing.JLabel();
        publisherLabel = new javax.swing.JLabel();
        publisherComboBox = new javax.swing.JComboBox<>();
        datePublishedLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionText = new javax.swing.JTextArea();
        numTotalText = new javax.swing.JTextField();
        datePublishedText = new javax.swing.JTextField();
        genreText = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        numAvailableLabel = new javax.swing.JLabel();
        numAvailableText = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        author_table = new javax.swing.JTable();
        authorFirstNameLabel = new javax.swing.JLabel();
        authorFirstNameText = new javax.swing.JTextField();
        authorLastNameText = new javax.swing.JTextField();
        authorLastNameLabel = new javax.swing.JLabel();
        authorBirthdayText = new javax.swing.JTextField();
        authorBirthdayLabel = new javax.swing.JLabel();
        addAuthorLable = new javax.swing.JLabel();
        addAuthorButton = new javax.swing.JButton();
        authorLabel = new javax.swing.JLabel();
        addExistingAuthorLabel = new javax.swing.JLabel();
        addExistingAuthorCombobox = new javax.swing.JComboBox<>();
        addExistingAuthorBtn = new javax.swing.JButton();

        numTotalText1.setText("jTextField1");

        addAuthorLable1.setText("Add New Author");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        titleLabel.setText("Title:");

        titleText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleTextActionPerformed(evt);
            }
        });

        descriptionLabel.setText("Description: ");

        numTotalLabel.setText("Total Copies:");

        genreLabel.setText("Genre: ");

        publisherLabel.setText("Publisher: ");

        publisherComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        datePublishedLabel.setText("Date Published: ");

        descriptionText.setColumns(20);
        descriptionText.setRows(5);
        jScrollPane1.setViewportView(descriptionText);

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        numAvailableLabel.setText("Available Copies:");

        author_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(author_table);

        authorFirstNameLabel.setText("First Name");

        authorLastNameLabel.setText("Last Name:");

        authorBirthdayLabel.setText("Birthday:");

        addAuthorLable.setText("Add New Author");

        addAuthorButton.setText("Add New Author");
        addAuthorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAuthorButtonActionPerformed(evt);
            }
        });

        authorLabel.setText("Authors:");

        addExistingAuthorLabel.setText("Add Existing Author");

        addExistingAuthorCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        addExistingAuthorBtn.setText("Add Existing Author");
        addExistingAuthorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addExistingAuthorBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(datePublishedLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(publisherLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(numTotalLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(descriptionLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(publisherComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(datePublishedText, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(genreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(genreText, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(titleText, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(numTotalText, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(numAvailableLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numAvailableText, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addAuthorLable, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(authorFirstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(authorFirstNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(authorLastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(authorBirthdayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(authorBirthdayText, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(addExistingAuthorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(addExistingAuthorCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(145, 145, 145)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(authorLastNameText)
                                .addComponent(addAuthorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addExistingAuthorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(authorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(titleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numTotalLabel)
                    .addComponent(numTotalText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numAvailableLabel)
                    .addComponent(numAvailableText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datePublishedText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datePublishedLabel)
                    .addComponent(genreLabel)
                    .addComponent(genreText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(publisherLabel)
                    .addComponent(publisherComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(authorLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 49, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addExistingAuthorCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addExistingAuthorLabel)
                            .addComponent(addExistingAuthorBtn))))
                .addGap(18, 18, 18)
                .addComponent(addAuthorLable)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(authorFirstNameLabel)
                    .addComponent(authorFirstNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(authorLastNameLabel)
                    .addComponent(authorLastNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(authorBirthdayLabel)
                    .addComponent(authorBirthdayText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addAuthorButton))
                .addGap(18, 18, 18)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        String title = titleText.getText().trim();
        String description = descriptionText.getText().trim();
        String genre = genreText.getText().trim();
        String numTotalString = numTotalText.getText().trim();
        String numAvailableString = numAvailableText.getText().trim();
        String dateString = datePublishedText.getText().trim();
        
        
        if (title.isEmpty() || description.isEmpty() || genre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all text fields.");
            return;
        }
        
        int numTotalCopies, numAvailableCopies, publisherId;
        java.sql.Date datePublished;
        
        try 
        {
            numTotalCopies = Integer.parseInt(numTotalString);
            numAvailableCopies = Integer.parseInt(numAvailableString);
            publisherId = publisherComboBox.getSelectedIndex() + 1;
        } 
        catch (NumberFormatException ex) 
        {
            JOptionPane.showMessageDialog(this, "Total and Available Copies must be numbers.");
            return;
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, "Error: Could not parse pubisher_id.");
            return;
        }
        
        if(numTotalCopies <= 0 || numTotalCopies < numAvailableCopies)
        {
            JOptionPane.showMessageDialog(this, 
                    "Total Copies must be greater than 0 and greater than or equal to the number available.");
            return;
        }
        
        if(numAvailableCopies <= 0 || numAvailableCopies > numTotalCopies)
        {
            JOptionPane.showMessageDialog(this, 
                    "Available copies must be greater than 0 and less than or equal to the toal number.");
            return;
        }
        
        try 
        {
            // Expects yyyy-MM-dd format
            datePublished = java.sql.Date.valueOf(dateString); 
        } 
        catch (IllegalArgumentException ex) 
        {
            JOptionPane.showMessageDialog(this, "Invalid date format. Use yyyy-MM-dd.");
            return;
        }
        
        Book newBook = new Book(
            id,
            title,
            description,
            genre,
            numTotalCopies,
            numAvailableCopies,
            publisherId,
            datePublished,
            0
        );
        
        if(authors.size() <= 0)
        {
            JOptionPane.showMessageDialog(this, "Your book must have at least one author.");
            return;
        }
        
        
        try 
        {
            BookDAO bookDAO = DatabaseAccess.getBookDAO();
            int book_id = bookDAO.createBook(newBook);
            for (Author author : authors)
            {
                bookDAO.addAuthorForBook(author.getFirstName(), author.getLastName(), author.getBirthDate(), book_id);
            }
            JOptionPane.showMessageDialog(this, "Book added successfully.");
            dispose();
        } 
        catch (SQLException ex) 
        {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to update book in the database.");
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void addAuthorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAuthorButtonActionPerformed
        String firstName = authorFirstNameText.getText().trim();
        String lastName = authorLastNameText.getText().trim();
        String birthdayString = authorBirthdayText.getText().trim();
        
        if (firstName.isEmpty() || lastName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all text fields.");
            return;
        }
        
        java.sql.Date birthday;
        try 
        {
            // Expects yyyy-MM-dd format
            birthday = java.sql.Date.valueOf(birthdayString); 
        } 
        catch (IllegalArgumentException ex) 
        {
            JOptionPane.showMessageDialog(this, "Invalid date format. Use yyyy-MM-dd.");
            return;
        }
        
        Author author = new Author(0, firstName, lastName, birthday);
        if (!authors.contains(author)) {
            authors.add(author);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "This author is already added to this book.");
            return;
        }
        loadAuthors();
    }//GEN-LAST:event_addAuthorButtonActionPerformed

    private void titleTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titleTextActionPerformed

    private void addExistingAuthorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addExistingAuthorBtnActionPerformed
        String selectedItem = (String) addExistingAuthorCombobox.getSelectedItem();
        int author_id = 2;
        try
        {
           author_id = Integer.parseInt(Character.toString(selectedItem.charAt(0)));
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, "Error: Failed to parse author_id.");
            return;
        }
        
        AuthorDAO authorDAO = DatabaseAccess.getAuthorDAO();
        try
        {
            Author author = authorDAO.getAuthorById(author_id);
            if (!authors.contains(author)) 
            {
                authors.add(author);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "This author is already added to this book.");
                return;
            }
            loadAuthors();
        }
        catch (SQLException ex)
        {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error, could not find author.");
        }
        
    }//GEN-LAST:event_addExistingAuthorBtnActionPerformed

    private void loadAuthors()
    {
        authorTableModel.setRowCount(0);
        for (Author a : authors)
        {
            authorTableModel.addRow(new Object[]{
                a.getFirstName(),
                a.getLastName(),
                a.getBirthDate()
            });
        }
    }
    
    //My own variable
    private int id;
    private Book book;
    private DefaultTableModel authorTableModel;
    private ArrayList<Author> authors;
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAuthorButton;
    private javax.swing.JLabel addAuthorLable;
    private javax.swing.JLabel addAuthorLable1;
    private javax.swing.JButton addExistingAuthorBtn;
    private javax.swing.JComboBox<String> addExistingAuthorCombobox;
    private javax.swing.JLabel addExistingAuthorLabel;
    private javax.swing.JLabel authorBirthdayLabel;
    private javax.swing.JTextField authorBirthdayText;
    private javax.swing.JLabel authorFirstNameLabel;
    private javax.swing.JTextField authorFirstNameText;
    private javax.swing.JLabel authorLabel;
    private javax.swing.JLabel authorLastNameLabel;
    private javax.swing.JTextField authorLastNameText;
    private javax.swing.JTable author_table;
    private javax.swing.JLabel datePublishedLabel;
    private javax.swing.JTextField datePublishedText;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextArea descriptionText;
    private javax.swing.JLabel genreLabel;
    private javax.swing.JTextField genreText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel numAvailableLabel;
    private javax.swing.JTextField numAvailableText;
    private javax.swing.JLabel numTotalLabel;
    private javax.swing.JTextField numTotalText;
    private javax.swing.JTextField numTotalText1;
    private javax.swing.JComboBox<String> publisherComboBox;
    private javax.swing.JLabel publisherLabel;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTextField titleText;
    // End of variables declaration//GEN-END:variables
    
    // Used to render delete button
    class DeleteButtonRenderer extends JButton implements TableCellRenderer 
    {
        public DeleteButtonRenderer() {
            setOpaque(true);
            setForeground(Color.WHITE);
            setBackground(Color.RED);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            setText("Delete");
            return this;
        }
    }
    
    // Used to perform delete action
    class DeleteButtonEditor extends DefaultCellEditor 
    {
        private JButton button;
        private boolean clicked;
        private int selectedRow;

        public DeleteButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton("Delete");
            button.setOpaque(true);
            button.setForeground(Color.WHITE);
            button.setBackground(Color.RED);

            button.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    fireEditingStopped(); // Stops editing
                }
            });
        }

        public Component getTableCellEditorComponent(JTable table, Object value,
        boolean isSelected, int row, int column) {
            clicked = true;
            selectedRow = row;
            return button;
        }

        public Object getCellEditorValue() {
            if (clicked) {
                // All code which is called when button is clicked
                int response = JOptionPane.showConfirmDialog(button,
                    "Are you sure you want to delete author at row " + (selectedRow + 1) + "?",
                    "Confirm Delete", JOptionPane.YES_NO_OPTION);

                if (response == JOptionPane.YES_OPTION) {
                    authors.remove(selectedRow);
                    loadAuthors();
                }
                selectedRow = 0;
            }
            clicked = false;
            return "Delete";
        }

        public boolean stopCellEditing() {
            clicked = false;
            return super.stopCellEditing();
        }

        protected void fireEditingStopped() {
            try
            {
                super.fireEditingStopped();
            }
            catch (Exception e)
            {
            }
        }
    }
}
